{"version":3,"sources":["serviceWorker.js","providers/ContextProvider.js","reducers/initialState.js","reducers/mainReducer.js","constants/ActionTypes.js","common/component/Copyright.js","utils/CommonUtils.js","common/component/NumberOutput.js","config.js","utils/RequestUtil.js","components/statistics/index.js","common/component/ApexChartComponent.js","components/visualization/index.js","common/component/MapComponent.js","components/globalMap/index.js","components/Dashboard.js","containers/AppContainer.js","index.js"],"names":["Boolean","window","location","hostname","match","ContextProvider","React","createContext","Provider","initialState","selectedCountry","confirmed","deaths","recovered","active","lastUpdate","daily","mainReducer","nextState","action","clonedState","type","data","cases","updated","console","error","Typography","variant","color","align","Date","getFullYear","parseDate","datestring","includeTime","date","month","toLocaleString","dateOfMonth","makeItTwo","getDate","hour","getHours","minutes","getMinutes","dateOutput","timeOutput","shortNumber","num","Math","round","digit","NumberOutput","props","duration","start","end","separator","appConfig","app_name","api_base_url","api_2","API","methods","_BASE_URL","_method","call","url","onSuccess","onFailure","options","prepareURL","method","fetch","then","res","json","catch","err","startsWith","query","qs","stringify","baseURL","useStyles","makeStyles","theme","boldText","textTransform","fontWeight","marginBottom","bolder","colDisp","display","flexDirection","rowDisp","memo","styles","useState","state","setState","useEffect","onGlobalStatFetchFailed","todayCases","todayDeaths","shortTodayCases","shortTodayDeaths","Paper","style","padding","className","opacity","Grid","container","item","xs","md","lg","component","colors","green","renderStats","CircularProgress","ApexChartComponent","series","height","width","children","seriesData","setSeriesData","setOptions","dailyData","chartDataMap","Object","keys","forEach","objectKey","obj","outPutData","entries","reverse","filter","_","i","map","k","x","y","chartData","name","dataLabels","enabled","stroke","curve","xaxis","labels","format","MapChart","highlightOptions","onHover","onCountryClick","data-tip","projectionConfig","scale","indigo","geography","jsonData","onError","log","geographies","geo","properties","fillColor","ISO_A3","red","grey","fill","key","rsmKey","onMouseEnter","onMouseLeave","onClick","e","preventDefault","hover","outline","pressed","boxShadow","focus","Alert","severity","AlertTitle","defaultProps","GlobalMap","caseInfo","setCaseInfo","tooltipContent","setTooltipContent","setError","_maxReduce","_minReduce","countriesStat","copyOfcaseInfo","maxValue","reduce","minValue","cInfo","start1","start2","number","iso3","countryInfo","constrainedFill","colorAlpha","message","fullMessager","renderGlobalMap","MapComponent","hasValue","country","tests","content","NAME","SUBREGION","noContent","root","toolbarIcon","alignItems","justifyContent","mixins","toolbar","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","leavingScreen","appBarShift","enteringScreen","title","flexGrow","appBarSpacer","overflow","paddingTop","spacing","paddingBottom","paper","fixedHeight","Dashboard","classes","CssBaseline","AppBar","position","Toolbar","noWrap","Container","maxWidth","Box","pt","Copyright","AppContainer","useReducer","dispatch","createMuiTheme","palette","primary","blue","typography","fontFamily","join","value","ThemeProvider","document","rootElement","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e6ca47d8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nexport const GlobalContext = React.createContext({});\nexport const ContextProvider = GlobalContext.Provider;","const initialState = {\n    selectedCountry: '',\n    confirmed: 0,\n    deaths: 0,\n    recovered: 0,\n    active: 0,\n    lastUpdate: null,\n    daily: []\n}\n\nexport default initialState;","import initialState from \"./initialState\";\nimport * as Types from \"../constants/ActionTypes\";\n\nexport const mainReducer = (nextState = initialState, action) => {\n  let clonedState = { ...nextState };\n\n  switch (action.type) {\n    case Types.FETCH_GLOBAL_STAT_SUCESS:\n      const { cases, recovered, deaths, updated, active } = action.data;\n      clonedState = {\n        ...clonedState,\n        confirmed: cases,\n        recovered,\n        deaths,\n        lastUpdate: updated,\n        active\n      };\n\n      nextState = clonedState;\n      return nextState;\n    case Types.FETCH_GLOBAL_STAT_FAILED:\n      console.error(action.data);\n      return nextState;\n    default:\n      return nextState;\n  }\n};\n","export const INITIAL_FETCH = \"INITIAL_FETCH\";\nexport const FETCH_GLOBAL_STAT_SUCESS = \"FETCH_GLOBAL_STAT_SUCESS\";\nexport const FETCH_GLOBAL_STAT_FAILED = \"FETCH_GLOBAL_STAT_FAILED\";\nexport const FETCH_GLOBAL_DAILY_SUCESS = \"FETCH_GLOBAL_DAILY_SUCESS\";\nexport const FETCH_GLOBAL_DAILY_FAILED = \"FETCH_GLOBAL_DAILY_FAILED\";\nexport const IS_LOADING = \"IS_LOADING\";\nexport const UNLOADED = \"UNLOADED\";","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\n\nexport default () => {\n    return (\n      <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n        {'UNVERIFIED DATA'}\n        {' | '}\n        {new Date().getFullYear()}\n      </Typography>\n    );\n  }","export const parseDate = (datestring, includeTime = true) => {\n    try {\n        const date = new Date(datestring)\n\n        const month = date.toLocaleString('default', { month: \"short\" });\n        const dateOfMonth = makeItTwo(date.getDate());\n        const hour = makeItTwo(date.getHours())\n        const minutes = makeItTwo(date.getMinutes());\n\n        const dateOutput = `${dateOfMonth} ${month}`\n        const timeOutput = `${hour}:${minutes}`\n\n        return dateOutput + (includeTime ? \", \" + timeOutput : \"\");\n    } catch {\n        return \"\";\n    }\n}\n\nexport const asDateObject = (datestring) => {\n    try {\n        const date = new Date(datestring)\n        return date;\n    } catch {\n        return \"\";\n    }\n}\n\nexport const shortNumber = num => {\n    if (num > 1000000000) {\n        return Math.round(num / 100000000) / 10 + \"Bn\";\n    } else if (num > 1000000) {\n        return Math.round(num / 100000) / 10 + \"M\";\n    } else if(num > 1000) {\n        return Math.round(num / 100) / 10 + \"K\";\n    } else {\n        return num;\n    }\n};\n\nexport const clamp = (value, start1, stop1, start2, stop2) => (\n    (value - start1) / (stop1 - start1) * (stop2 - start2) + start2\n);\n\nconst makeItTwo = digit => {\n    return digit > 9 ? digit : `0${digit}`;\n}","import React from \"react\";\nimport CountUp from \"react-countup\";\n\nconst NumberOutput = props => {\n    const { duration = 2, start = 0, end = 0 } = props\n\n    return <>\n        <CountUp\n            start={start}\n            end={end}\n            duration={duration}\n            separator=\",\"\n        />\n    </>\n}\n\nexport default NumberOutput;","const appConfig = {\n    app_name: \"COVID - 19 Tracker\",\n    api_base_url: \"https://covid19.mathdro.id/api\",\n    api_2: \"https://corona.lmao.ninja\"\n}\n\nexport default appConfig;","import qs from \"querystring\";\nimport appConfig  from \"../config\";\n\nclass API {\n    static methods = { \"GET\": \"GET\", \"POST\": \"POST\", \"DELETE\": \"DELETE\", \"PUT\": \"PUT\" };\n    static _BASE_URL = appConfig.api_2;\n    static _method = \"GET\";\n\n    static call = (url, onSuccess=null, onFailure=null, options={}) => {\n        url = this.prepareURL(url, options);\n        let method = options.method ? options.method : this._method;\n\n        fetch(url, {method})\n        .then(res => res.json())\n        .then(res => {\n            if(onSuccess) onSuccess(res)\n        })\n        .catch(err => {\n            if(onFailure) onFailure(err);\n        });\n    }\n\n    static prepareURL = (url, options) => {\n        if(!url.startsWith(\"/\"))\n            url = `/${url}`;\n        \n        if(options.query) {\n            url += `?${qs.stringify(options.query)}`;\n        }\n\n        const domain = options.baseURL ? options.baseURL : this._BASE_URL;\n\n        return domain + url;\n    }\n}\n\nexport default API;","import React, { useEffect, useState } from \"react\";\nimport { Typography, makeStyles, colors, CircularProgress, Grid, Paper } from \"@material-ui/core\";\nimport { parseDate, shortNumber } from \"../../utils/CommonUtils\";\nimport NumberOutput from \"../../common/component/NumberOutput\";\nimport API from \"../../utils/RequestUtil\";\n\nconst useStyles = makeStyles(theme => ({\n    boldText: {\n        textTransform: \"uppercase\",\n        fontWeight: \"bold\",\n        marginBottom: 10,\n    },\n    bolder: {\n        fontWeight: \"bolder\",\n        marginBottom: 5,\n    },\n    colDisp: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        marginBottom: 30,\n    },\n    rowDisp: {\n        display: \"flex\"\n    }\n}));\n\nconst Statistics = props => {\n    const styles = useStyles();\n    const [state, setState] = useState({});\n\n    useEffect(() => {\n        const onGlobalStatFetchSuccess = res => {\n            const { cases, recovered, deaths, updated, active } = res;\n            const { todayCases, todayDeaths } = res;\n            let clonedState = {\n                confirmed: cases,\n                recovered,\n                deaths,\n                lastUpdate: updated,\n                active,\n                todayCases,\n                todayDeaths\n            };\n\n            setState(clonedState);\n        }\n\n        const onGlobalStatFetchFailed = console.error;\n\n        API.call(\"/v2/all\", onGlobalStatFetchSuccess, onGlobalStatFetchFailed);\n    }, []);\n\n    const renderStats = () => {\n        const { lastUpdate, confirmed, recovered, deaths, active } = state;\n        const { todayCases, todayDeaths } = state;\n\n        const shortTodayCases = shortNumber(todayCases);\n        const shortTodayDeaths = shortNumber(todayDeaths);\n\n        return <Paper style={{ padding: \"10%\" }}>\n            <Typography variant=\"subtitle2\" color=\"primary\">\n                <div className={styles.colDisp}>\n                    <span style={{ opacity: .7 }}>last updated</span>\n                    <span className={styles.boldText}>{parseDate(lastUpdate)}</span>\n                </div>\n            </Typography>\n\n            <Grid container>\n                <Grid item xs={6} md={6} lg={6}>\n                    <div className={styles.colDisp}>\n                        <Typography color=\"error\" className={styles.boldText}>confirmed</Typography>\n                        <Typography color=\"error\" className={styles.bolder}><NumberOutput end={confirmed} /></Typography>\n                        {todayCases && <Typography variant=\"body2\" component=\"small\" color=\"error\">[+{shortTodayCases}]</Typography>}\n                    </div>\n                </Grid>\n                <Grid item xs={6} md={4} lg={4}>\n                    <div className={styles.colDisp}>\n                        <Typography color=\"textSecondary\" className={styles.boldText}>deaths</Typography>\n                        <Typography color=\"textSecondary\" className={styles.bolder}><NumberOutput end={deaths} /></Typography>\n                        {todayDeaths && <Typography variant=\"body2\" component=\"small\" color=\"textSecondary\">[+{shortTodayDeaths}]</Typography>}\n                    </div>\n                </Grid>\n                <Grid item xs={6} md={6} lg={6}>\n                    <div className={styles.colDisp}>\n                        <Typography color=\"primary\" className={styles.boldText}>active</Typography>\n                        <Typography color=\"primary\" className={styles.bolder}><NumberOutput end={active} /></Typography>\n                    </div>\n                </Grid>\n                <Grid item xs={6} md={6} lg={6}>\n                    <div className={styles.colDisp}>\n                        <Typography style={{ color: colors.green[500] }} className={styles.boldText}>recovered</Typography>\n                        <Typography style={{ color: colors.green[500] }} className={styles.bolder}><NumberOutput end={recovered} /></Typography>\n                    </div>\n                </Grid>\n            </Grid>\n        </Paper>\n    };\n\n    return state.lastUpdate ? renderStats() : <CircularProgress />\n}\n\nexport default React.memo(Statistics);","import React from \"react\";\nimport ReactApexCharts from \"react-apexcharts\";\nimport PropTypes from 'prop-types';\n\nconst ApexChartComponent = (props) => {\n  const { options = {}, series = [] } = props;\n  const { type = \"area\", height = 350, width = \"100%\" } = props;\n  const { children = null } = props;\n\n  const renderWithChildren = () => (\n    <ReactApexCharts\n      options={options}\n      series={series}\n      width={width}\n      height={height}\n      type={type}\n    >\n      {children}\n    </ReactApexCharts>\n  );\n\n  const renderWithoutChildren = () => (\n    <ReactApexCharts\n      options={options}\n      series={series}\n      width={width}\n      height={height}\n      type={type}\n    />\n  );\n\n  return children ? renderWithChildren() : renderWithoutChildren();\n};\n\nApexChartComponent.propTypes = {\n  options: PropTypes.object,\n  series: PropTypes.array,\n  height: PropTypes.number,\n  type: PropTypes.string,\n  width: PropTypes.number,\n  children: PropTypes.element\n}\n\nexport default ApexChartComponent;\n","import React, { useEffect, useState } from \"react\";\nimport API from \"../../utils/RequestUtil\";\nimport ApexChartComponent from \"../../common/component/ApexChartComponent\";\nimport { parseDate } from \"../../utils/CommonUtils\";\nimport { CircularProgress, Paper } from \"@material-ui/core\";\n\nconst DataVisualization = (props) => {\n  const [seriesData, setSeriesData] = useState(null);\n  const [options, setOptions] = useState({});\n\n  useEffect(() => {\n    const onSuccess = (res) => {\n      const dailyData = res || [];\n      const spread = 4;\n\n      let chartDataMap = {};\n      Object.keys(dailyData).forEach((objectKey) => {\n        const obj = dailyData[objectKey]\n        const outPutData = Object.entries(obj).reverse().filter((_, i) => i % spread === 0).reverse()\n        chartDataMap[objectKey] = outPutData.map(k => ({ x: parseDate(k[0], false), y: k[1] }));\n      });\n\n      const chartData = [\n        {\n          name: \"CONFIRMED\",\n          data: chartDataMap[\"cases\"],\n        },\n        {\n          name: \"RECOVERED\",\n          data: chartDataMap[\"recovered\"],\n        },\n        {\n          name: \"DEATHS\",\n          data: chartDataMap[\"deaths\"],\n        },\n      ];\n\n      const chartOptions = {\n        dataLabels: {\n          enabled: false,\n        },\n        stroke: {\n          curve: \"smooth\",\n        },\n        xaxis: {\n          labels: {\n            format: \"dd/MM\"\n          }\n        },\n      };\n\n      setSeriesData(chartData);\n      setOptions(chartOptions);\n    };\n\n    const onFail = (err) => {\n      console.error(err);\n    };\n\n    API.call(\"/v2/historical/all\", onSuccess, onFail);\n  }, []);\n\n  return (\n    seriesData ? <Paper><ApexChartComponent options={options} series={seriesData} /></Paper> : <CircularProgress />\n  );\n};\n\nexport default React.memo(DataVisualization);\n","import React, { memo } from \"react\";\nimport {\n    ComposableMap,\n    Geographies,\n    Geography,\n    Graticule\n} from \"react-simple-maps\";\nimport { colors } from \"@material-ui/core\";\nimport Proptypes from \"prop-types\";\nimport { Alert, AlertTitle } from '@material-ui/lab';\nimport jsonData from \"../data/world-map.json\";\n\n// BROKEN\n// const geoUrl =\n//     \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst MapChart = props => {\n    const { highlightOptions, onHover, onCountryClick } = props;\n\n    const getFillColor = properties => {\n        if (highlightOptions[properties.ISO_A3]) {\n            return colors.red[highlightOptions[properties.ISO_A3]['colorAlpha']];\n        } else {\n            return colors.grey[300]\n        }\n    }\n\n    try {\n        return (\n            <>\n                <ComposableMap data-tip=\"\" projectionConfig={{ scale: 150 }}>\n                    <Graticule stroke={colors.indigo[300]} />\n                    <Geographies  geography={jsonData} onError={console.log}>\n                        {({ geographies }) =>\n                            geographies.map(geo => {\n                                const fillColor = getFillColor(geo.properties);\n                                return <Geography\n                                    fill={fillColor}\n                                    key={geo.rsmKey}\n                                    geography={geo}\n                                    onMouseEnter={() => {\n                                        onHover(geo.properties);\n                                    }}\n                                    onMouseLeave={() => {\n                                        onHover(geo.properties, false);\n                                    }}\n                                    onClick={e => { e.preventDefault(); onCountryClick(geo) }}\n                                    style={{\n                                        hover: {\n                                            fill: \"#F53\",\n                                            outline: \"none\"\n                                        },\n                                        pressed: {\n                                            fill: \"#E42\",\n                                            outline: \"none\",\n                                            boxShadow: \"none\"\n                                        },\n                                        focus: {\n                                            outline: \"none\",\n                                            boxShadow: \"none\"\n                                        }\n                                    }}\n                                />\n                            })\n                        }\n                    </Geographies>\n                </ComposableMap>\n            </>\n        );\n    } catch (error) {\n        console.log(\"Caught!!!\");\n        return <Alert severity=\"error\">\n            <AlertTitle>Error</AlertTitle>\n        This is an error alert — <strong>check it out!</strong>\n        </Alert>\n    }\n};\n\nMapChart.propTypes = {\n    highlightOptions: Proptypes.object,\n    onHover: Proptypes.func,\n    onCountryClick: Proptypes.func\n}\n\nMapChart.defaultProps = {\n    highlightOptions: {},\n    onHover: () => { },\n    onCountryClick: () => { }\n}\n\nexport default memo(MapChart);\n","import React, { useEffect, useState } from \"react\";\nimport API from \"../../utils/RequestUtil\";\nimport MapComponent from \"../../common/component/MapComponent\";\nimport { clamp, parseDate } from \"../../utils/CommonUtils\";\nimport ReactTooltip from \"react-tooltip\";\nimport { Typography, CircularProgress, Paper } from \"@material-ui/core\";\nimport { Alert, AlertTitle } from '@material-ui/lab';\n\n\nconst GlobalMap = props => {\n    // call and get global data;\n    const [caseInfo, setCaseInfo] = useState(null);\n    const [tooltipContent, setTooltipContent] = useState();\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const _maxReduce = (x, y) => {\n            if (x.cases && y.cases) {\n                return (x.cases > y.cases) ? x : y;\n            }\n            return x;\n        }\n\n        const _minReduce = (x, y) => {\n            if (x.cases && y.cases) {\n                return (x.cases < y.cases) ? x : y;\n            }\n            return x;\n        }\n\n        const roundToNearHundred = number => Math.round(number / 100) * 100;\n\n        const onSuccess = res => {\n            const countriesStat = res;\n            let copyOfcaseInfo = {};\n\n            const maxValue = countriesStat.reduce(_maxReduce).cases;\n            const minValue = countriesStat.reduce(_minReduce).cases;\n\n            countriesStat.forEach(cInfo => {\n                const { cases, countryInfo: { iso3 } } = cInfo\n                const constrainedFill = clamp(cases, minValue, maxValue, 200, 900);\n                if (iso3) {\n                    copyOfcaseInfo[iso3] = {\n                        colorAlpha: roundToNearHundred(constrainedFill),\n                        data: cInfo\n                    }\n                }\n            });\n\n            setCaseInfo(copyOfcaseInfo);\n        }\n\n        const onFailed = err => {\n            console.log(\"error\", err);\n            setError({\n                message: \"Failed to fetch map data\",\n                fullMessager: err\n            });\n        };\n\n        API.call(\"/v2/countries\", onSuccess, onFailed);\n    }, []);\n\n    const onHover = (properties, hasValue = true) => {\n        if (!hasValue) {\n            const { NAME, SUBREGION } = properties;\n            console.log(properties);\n            const noContent = <>\n                <Typography variant=\"h5\">{NAME}</Typography>\n                <Typography variant=\"h6\">{SUBREGION}</Typography>\n                <Typography variant=\"body2\">No data available</Typography>\n            </>\n            setTooltipContent(noContent);\n            return;\n        }\n\n        const countryInfo = caseInfo[properties.ISO_A3];\n\n        if (countryInfo) {\n            const { data: { updated, country, cases, recovered, deaths, active, tests } } = caseInfo[properties.ISO_A3];\n            const { data: { todayDeaths, todayCases } } = caseInfo[properties.ISO_A3];\n\n            const content = <>\n                <Typography variant=\"h5\">{country}</Typography>\n                <Typography variant=\"h6\">{parseDate(updated)}</Typography>\n                <div>\n                    <div>CASES: {cases} [+{todayCases}]</div>\n                    <div>RECOVERED: {recovered}</div>\n                    <div>DEATHS: {deaths} [+{todayDeaths}]</div>\n                    <div>ACTIVE: {active}</div>\n                    <div>TESTS: {tests}</div>\n                </div>\n            </>\n\n            setTooltipContent(content);\n        }\n    }\n\n    const onCountryClick = console.log;\n\n    const renderGlobalMap = <Paper style={{ padding: 10 }}>\n        <MapComponent\n            highlightOptions={caseInfo}\n            onHover={onHover}\n            onCountryClick={onCountryClick}\n        />\n        <ReactTooltip>{tooltipContent}</ReactTooltip>\n    </Paper>\n\n    console.log(error);\n\n    if (error) {\n        return <Alert severity=\"error\">\n            <AlertTitle>Error</AlertTitle>\n        This is an error alert — <strong>check it out!</strong>\n        </Alert>\n    }\n\n    return caseInfo ? renderGlobalMap : <CircularProgress />\n}\n\nexport default GlobalMap;","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Box from \"@material-ui/core/Box\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Copyright from \"../common/component/Copyright\";\nimport Statistics from \"./statistics\";\nimport DataVisualization from \"./visualization\";\nimport GlobalMap from \"./globalMap\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: \"flex\",\n    },\n    toolbarIcon: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"flex-end\",\n        padding: \"0 8px\",\n        ...theme.mixins.toolbar,\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create([\"width\", \"margin\"], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        transition: theme.transitions.create([\"width\", \"margin\"], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    title: {\n        flexGrow: 1,\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        height: \"100vh\",\n        overflow: \"auto\",\n    },\n    container: {\n        paddingTop: theme.spacing(4),\n        paddingBottom: theme.spacing(4),\n    },\n    paper: {\n        padding: theme.spacing(2),\n        display: \"flex\",\n        overflow: \"auto\",\n        flexDirection: \"column\",\n    },\n    fixedHeight: {\n        height: \"30vh\",\n    },\n}));\n\nconst Dashboard = (props) => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar position=\"absolute\" className={classes.appBar}>\n                <Toolbar>\n                    <Typography\n                        component=\"h1\"\n                        variant=\"h6\"\n                        color=\"inherit\"\n                        noWrap\n                        className={classes.title}\n                    >\n                        COVID - 19 TRACKER <small> ( Across Global ) </small>\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <main className={classes.content}>\n                <div className={classes.appBarSpacer} />\n                <Container maxWidth=\"lg\" className={classes.container}> \n                    <Grid container spacing={3}>\n                        <Grid item xs={12} md={4} lg={4}>\n                                <Statistics {...props} />\n                        </Grid>\n                        <Grid item xs={12} md={8} lg={8}>\n                            <DataVisualization data={props.daily} />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <GlobalMap />\n                        </Grid>\n                    </Grid>\n                    <Box pt={4}>\n                        <Copyright />\n                    </Box>\n                </Container>\n            </main>\n        </div>\n    );\n};\n\nexport default Dashboard;\n","import React, { useReducer } from \"react\";\nimport { ContextProvider } from \"../providers/ContextProvider\";\nimport { mainReducer } from \"../reducers/mainReducer\";\nimport initialState from \"../reducers/initialState\";\nimport Dashboard from \"../components/Dashboard\";\nimport { createMuiTheme, ThemeProvider, colors } from \"@material-ui/core\";\n\nconst AppContainer = () => {\n    const [state, dispatch] = useReducer(mainReducer, initialState);\n\n    const theme = createMuiTheme({\n        palette: {\n            primary: colors.blue,\n        },\n        typography: {\n            fontFamily: [\n                \"Fira code\",\n                \"Exo\",\n                \"Trebuchet MS\",\n                \"Roboto\",\n                \"sans-serif\"\n            ].join(\",\")\n        }\n    });\n    return <ContextProvider value={[state, dispatch]}>\n        <ThemeProvider theme={theme}>\n            <Dashboard {...state} />\n        </ThemeProvider>\n    </ContextProvider>\n}\n\nexport default AppContainer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport AppContainer from './containers/AppContainer';\nimport appConfig from './config';\n\ndocument.title = appConfig.app_name;\nconst rootElement = document.getElementById('cvid-tracker-main')\nReactDOM.render(<AppContainer />, rootElement);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}